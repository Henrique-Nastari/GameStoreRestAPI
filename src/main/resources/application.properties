spring.application.name=gameStoreRest

# ===================================================
# CONFIGURAÇÃO DO BANCO DE DADOS (DATASOURCE)
# ===================================================
# A URL de conexão JDBC. Aponta para o banco rodando em localhost na porta que mapeamos.
spring.datasource.url=jdbc:postgresql://localhost:5432/gamestorerest
# O usuário do banco, conforme definido no compose.yml.
spring.datasource.username=postgres
# A senha do banco, conforme definido no compose.yml.
spring.datasource.password=postgres


# ===================================================
# CONFIGURAÇÃO DO JPA/HIBERNATE
# ===================================================
# Estratégia de geração do schema do banco. 'update' é ótimo para desenvolvimento.
# O Hibernate vai comparar suas classes @Entity com as tabelas do banco e fazer as atualizações necessárias.
spring.jpa.hibernate.ddl-auto=update

# Mostra no console os comandos SQL que o Hibernate está executando. Excelente para depuração.
spring.jpa.show-sql=true

# Formata o SQL exibido no console para que fique mais legível.
spring.jpa.properties.hibernate.format_sql=true

# Chave secreta para assinatura dos tokens JWT.
# EM UM AMBIENTE DE PRODUÇÃO, USE UMA CHAVE MUITO MAIS FORTE E GERENCIE-A COM VARIÁVEIS DE AMBIENTE.
api.security.token.secret=meu-secret-super-secreto-para-gamestore-rest-api-123456

logging.level.org.springframework.security=TRACE